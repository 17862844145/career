JavaScript开发中遇到的错误
4.27: 父节点.removeChild（）删除的元素节点，并非真正意义上的删除，在栈中依然可以找到这个元素；解决办法：删除的元素节点=null
4.28：从JS里添加的样式属于行内样式，优先级最高
——————来自轮播图点击清除calss名，然而JS添加的样式没有清除掉。解决办法引用class名的方式
4.29   let Tab = document.querySelectorAll("table");不是唯一的 
————————来自DOM操作；解决办法Tab[下标]，或者let Tab = document.querySelector("table");
4.29 元素绝对定位的 left，top ，bottom，right都有px单位
————————来自DOM操作；+px
5.7 for循环在执行中几乎是同步执行，有时候会出现隐藏的bug()
在运用到图片加载上会出现堵塞以至于排序会乱掉
————————来自封装轮播图
5.8 一个=赋值；==数值比较；===类型，数值比较；
————————来自商品列表事件类型比较；解决办法===
5.9 封装好的dom创建函数，不可以像封装好的DOM选择器函数在同一个页面无数次引用，dom创建函数必须赋予给一个变量，因为每一次的直接引用都是重新调用
————————来自商品列表中创建商品；解决办法赋值给变量
5.14 php通信，做好的页面放在Apache环境文件下，直接打开这样操作，页面文件并没有经过Apache环境，
————————从浏览器输入本地地址或127.0.0.1+文件名或者http://localhost（在本地地址没有被更改绑定文件夹时）打开。
————————更改本地地址绑定到显示文件所在的文件夹上，注意不要有中文。
5.15  setTimeout( fn,0),这个延时器看上去像是立即执行，实际上并不是：setTimeout(fn,0)的含义是，指定某个任务在主线程最早可得的空闲时间执行，意思就是不用再等多少秒了，只要主线程执行栈内的同步任务全部执行完成，栈为空就马上执行。
————————宏任务与微任务
5.15
5.15 
        for (var i = 0; i < 3; i++) {
            setTimeout(function() {
                console.log(i);
            }, 0)
        }
       for (var i = 1; i <= 5; i++) {
            setTimeout(function() {
                console.log(i); //6
            }, i * 1000)
        }
1：打印三个3
2：每一秒打印一个6
————————宏任务与微任务
5.17 在用服务器环境测试页面时，一定要注意浏览器的缓存，不经过服务器环境没有BUG，而经过服务器环境就会出现BUG，很大程度上是因为浏览器缓存的问题，但是在测试单页面一般不会有这个问题
所以说在测试整站的时候一定要多个浏览器去测试，或者用无痕浏览器测试效果
————————来自购物网站的注册页面的Ajax通信，根据服务器响应弹出DOM

